buildscript {
    ext {
//        javaVersion = JavaVersion.VERSION_1_8
        javaVersion = JavaVersion.VERSION_11
//        lombokVersion = '1.18.10'
        jaxbVersion = '2.3.1'
        springBootVersion = '2.3.1.RELEASE'
//        jooqVersion  = '3.13.2'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'nu.studer.jooq' version '4.2'
}

group 'com.github.ericdriggs'
version '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion


dependencies {
    implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"


    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    TODO: developmentOnly for devtools?
    compile 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'


    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'

//    testImplementation 'org.springframework.security:spring-security-test'


//    compile "com.h2database:h2:1.4.200"

    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    implementation 'org.jooq:jooq'
//    compile "org.jooq:jooq-meta:${jooqVersion}"
//    compile "org.jooq:jooq-codegen:${jooqVersion}"
    jooqRuntime 'mysql:mysql-connector-java:8.0.20'

}

jooq {
    version = '3.13.2'
    edition = 'OSS'
    generateSchemaSourceOnCompilation = false
    sample(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
//            url = 'jdbc:mysql://localhost:3306/ragnarok'
            url = 'jdbc:mysql://127.0.0.1:3306/ragnarok?serverTimezone=UTC'
            user = 'root'
            password = ''
            properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                // ...
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'ragnarok'
                forcedTypes {
                    forcedType {
                        name = 'varchar'
                        includeExpression = '.*'
                        types = 'JSONB?'
                    }
                    forcedType {
                        name = 'varchar'
                        includeExpression = '.*'
                        types = 'INET'
                    }
                }
                // ...
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                // ...
            }
            target {
                packageName = 'com.ericdriggs.ragnarok.db'
                directory = 'src/generated/java'
            }
        }
    }
}
sourceSets.main.java.srcDirs += ['src/generated/java']

test {
    useJUnitPlatform()
    systemProperties System.properties
    outputs.upToDateWhen { false }
}

clean {
    delete 'build'
    delete 'target'
}
