/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.ragnarok.db.tables.records;


import com.ericdriggs.ragnarok.db.tables.TestResult;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestResultRecord extends UpdatableRecordImpl<TestResultRecord> implements Record9<ULong, ULong, UInteger, UInteger, UInteger, UInteger, Long, Byte, Byte> {

    private static final long serialVersionUID = 1282288839;

    /**
     * Setter for <code>ragnarok.test_result.id</code>.
     */
    public TestResultRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>ragnarok.test_result.build_stage_fk</code>.
     */
    public TestResultRecord setBuildStageFk(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.build_stage_fk</code>.
     */
    public ULong getBuildStageFk() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>ragnarok.test_result.tests</code>.
     */
    public TestResultRecord setTests(UInteger value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.tests</code>.
     */
    public UInteger getTests() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>ragnarok.test_result.skipped</code>.
     */
    public TestResultRecord setSkipped(UInteger value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.skipped</code>.
     */
    public UInteger getSkipped() {
        return (UInteger) get(3);
    }

    /**
     * Setter for <code>ragnarok.test_result.error</code>.
     */
    public TestResultRecord setError(UInteger value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.error</code>.
     */
    public UInteger getError() {
        return (UInteger) get(4);
    }

    /**
     * Setter for <code>ragnarok.test_result.failure</code>.
     */
    public TestResultRecord setFailure(UInteger value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.failure</code>.
     */
    public UInteger getFailure() {
        return (UInteger) get(5);
    }

    /**
     * Setter for <code>ragnarok.test_result.time</code>.
     */
    public TestResultRecord setTime(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.time</code>.
     */
    public Long getTime() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>ragnarok.test_result.is_success</code>.
     */
    public TestResultRecord setIsSuccess(Byte value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.is_success</code>.
     */
    public Byte getIsSuccess() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>ragnarok.test_result.has_skip</code>.
     */
    public TestResultRecord setHasSkip(Byte value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ragnarok.test_result.has_skip</code>.
     */
    public Byte getHasSkip() {
        return (Byte) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, UInteger, UInteger, UInteger, UInteger, Long, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<ULong, ULong, UInteger, UInteger, UInteger, UInteger, Long, Byte, Byte> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return TestResult.TEST_RESULT.ID;
    }

    @Override
    public Field<ULong> field2() {
        return TestResult.TEST_RESULT.BUILD_STAGE_FK;
    }

    @Override
    public Field<UInteger> field3() {
        return TestResult.TEST_RESULT.TESTS;
    }

    @Override
    public Field<UInteger> field4() {
        return TestResult.TEST_RESULT.SKIPPED;
    }

    @Override
    public Field<UInteger> field5() {
        return TestResult.TEST_RESULT.ERROR;
    }

    @Override
    public Field<UInteger> field6() {
        return TestResult.TEST_RESULT.FAILURE;
    }

    @Override
    public Field<Long> field7() {
        return TestResult.TEST_RESULT.TIME;
    }

    @Override
    public Field<Byte> field8() {
        return TestResult.TEST_RESULT.IS_SUCCESS;
    }

    @Override
    public Field<Byte> field9() {
        return TestResult.TEST_RESULT.HAS_SKIP;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getBuildStageFk();
    }

    @Override
    public UInteger component3() {
        return getTests();
    }

    @Override
    public UInteger component4() {
        return getSkipped();
    }

    @Override
    public UInteger component5() {
        return getError();
    }

    @Override
    public UInteger component6() {
        return getFailure();
    }

    @Override
    public Long component7() {
        return getTime();
    }

    @Override
    public Byte component8() {
        return getIsSuccess();
    }

    @Override
    public Byte component9() {
        return getHasSkip();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getBuildStageFk();
    }

    @Override
    public UInteger value3() {
        return getTests();
    }

    @Override
    public UInteger value4() {
        return getSkipped();
    }

    @Override
    public UInteger value5() {
        return getError();
    }

    @Override
    public UInteger value6() {
        return getFailure();
    }

    @Override
    public Long value7() {
        return getTime();
    }

    @Override
    public Byte value8() {
        return getIsSuccess();
    }

    @Override
    public Byte value9() {
        return getHasSkip();
    }

    @Override
    public TestResultRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public TestResultRecord value2(ULong value) {
        setBuildStageFk(value);
        return this;
    }

    @Override
    public TestResultRecord value3(UInteger value) {
        setTests(value);
        return this;
    }

    @Override
    public TestResultRecord value4(UInteger value) {
        setSkipped(value);
        return this;
    }

    @Override
    public TestResultRecord value5(UInteger value) {
        setError(value);
        return this;
    }

    @Override
    public TestResultRecord value6(UInteger value) {
        setFailure(value);
        return this;
    }

    @Override
    public TestResultRecord value7(Long value) {
        setTime(value);
        return this;
    }

    @Override
    public TestResultRecord value8(Byte value) {
        setIsSuccess(value);
        return this;
    }

    @Override
    public TestResultRecord value9(Byte value) {
        setHasSkip(value);
        return this;
    }

    @Override
    public TestResultRecord values(ULong value1, ULong value2, UInteger value3, UInteger value4, UInteger value5, UInteger value6, Long value7, Byte value8, Byte value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestResultRecord
     */
    public TestResultRecord() {
        super(TestResult.TEST_RESULT);
    }

    /**
     * Create a detached, initialised TestResultRecord
     */
    public TestResultRecord(ULong id, ULong buildStageFk, UInteger tests, UInteger skipped, UInteger error, UInteger failure, Long time, Byte isSuccess, Byte hasSkip) {
        super(TestResult.TEST_RESULT);

        set(0, id);
        set(1, buildStageFk);
        set(2, tests);
        set(3, skipped);
        set(4, error);
        set(5, failure);
        set(6, time);
        set(7, isSuccess);
        set(8, hasSkip);
    }
}
