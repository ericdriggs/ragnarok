/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.ragnarok.db.tables.daos;


import com.ericdriggs.ragnarok.db.tables.Branch;
import com.ericdriggs.ragnarok.db.tables.records.BranchRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BranchDao extends DAOImpl<BranchRecord, com.ericdriggs.ragnarok.db.tables.pojos.Branch, Integer> {

    /**
     * Create a new BranchDao without any configuration
     */
    public BranchDao() {
        super(Branch.BRANCH, com.ericdriggs.ragnarok.db.tables.pojos.Branch.class);
    }

    /**
     * Create a new BranchDao with an attached configuration
     */
    public BranchDao(Configuration configuration) {
        super(Branch.BRANCH, com.ericdriggs.ragnarok.db.tables.pojos.Branch.class, configuration);
    }

    @Override
    public Integer getId(com.ericdriggs.ragnarok.db.tables.pojos.Branch object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Branch> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Branch.BRANCH.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Branch> fetchById(Integer... values) {
        return fetch(Branch.BRANCH.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.ericdriggs.ragnarok.db.tables.pojos.Branch fetchOneById(Integer value) {
        return fetchOne(Branch.BRANCH.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Branch> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Branch.BRANCH.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Branch> fetchByName(String... values) {
        return fetch(Branch.BRANCH.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public com.ericdriggs.ragnarok.db.tables.pojos.Branch fetchOneByName(String value) {
        return fetchOne(Branch.BRANCH.NAME, value);
    }

    /**
     * Fetch records that have <code>repo_fk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Branch> fetchRangeOfRepoFk(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Branch.BRANCH.REPO_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>repo_fk IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Branch> fetchByRepoFk(Integer... values) {
        return fetch(Branch.BRANCH.REPO_FK, values);
    }
}
