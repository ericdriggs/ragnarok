/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.ragnarok.db.tables.daos;


import com.ericdriggs.ragnarok.db.tables.Storage;
import com.ericdriggs.ragnarok.db.tables.records.StorageRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageDao extends DAOImpl<StorageRecord, com.ericdriggs.ragnarok.db.tables.pojos.Storage, Integer> {

    /**
     * Create a new StorageDao without any configuration
     */
    public StorageDao() {
        super(Storage.STORAGE, com.ericdriggs.ragnarok.db.tables.pojos.Storage.class);
    }

    /**
     * Create a new StorageDao with an attached configuration
     */
    public StorageDao(Configuration configuration) {
        super(Storage.STORAGE, com.ericdriggs.ragnarok.db.tables.pojos.Storage.class, configuration);
    }

    @Override
    public Integer getId(com.ericdriggs.ragnarok.db.tables.pojos.Storage object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Storage.STORAGE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchById(Integer... values) {
        return fetch(Storage.STORAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.ericdriggs.ragnarok.db.tables.pojos.Storage fetchOneById(Integer value) {
        return fetchOne(Storage.STORAGE.ID, value);
    }

    /**
     * Fetch records that have <code>build_stage_fk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfBuildStageFk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Storage.STORAGE.BUILD_STAGE_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>build_stage_fk IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByBuildStageFk(Long... values) {
        return fetch(Storage.STORAGE.BUILD_STAGE_FK, values);
    }

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfLabel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.LABEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByLabel(String... values) {
        return fetch(Storage.STORAGE.LABEL, values);
    }

    /**
     * Fetch records that have <code>storage_type_fk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfStorageTypeFk(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Storage.STORAGE.STORAGE_TYPE_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storage_type_fk IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByStorageTypeFk(Byte... values) {
        return fetch(Storage.STORAGE.STORAGE_TYPE_FK, values);
    }

    /**
     * Fetch records that have <code>s3_bucket BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfS3Bucket(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.S3_BUCKET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>s3_bucket IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByS3Bucket(String... values) {
        return fetch(Storage.STORAGE.S3_BUCKET, values);
    }

    /**
     * Fetch records that have <code>s3_folder_path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfS3FolderPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.S3_FOLDER_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>s3_folder_path IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByS3FolderPath(String... values) {
        return fetch(Storage.STORAGE.S3_FOLDER_PATH, values);
    }

    /**
     * Fetch records that have <code>s3_file_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfS3FileName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.S3_FILE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>s3_file_name IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByS3FileName(String... values) {
        return fetch(Storage.STORAGE.S3_FILE_NAME, values);
    }

    /**
     * Fetch records that have <code>s3_file_matcher BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchRangeOfS3FileMatcher(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.S3_FILE_MATCHER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>s3_file_matcher IN (values)</code>
     */
    public List<com.ericdriggs.ragnarok.db.tables.pojos.Storage> fetchByS3FileMatcher(String... values) {
        return fetch(Storage.STORAGE.S3_FILE_MATCHER, values);
    }
}
