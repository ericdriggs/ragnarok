/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.db.tables.daos;


import com.ericdriggs.reportcard.db.tables.Org;
import com.ericdriggs.reportcard.db.tables.records.OrgRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrgDao extends DAOImpl<OrgRecord, com.ericdriggs.reportcard.db.tables.pojos.Org, Integer> {

    /**
     * Create a new OrgDao without any configuration
     */
    public OrgDao() {
        super(Org.ORG, com.ericdriggs.reportcard.db.tables.pojos.Org.class);
    }

    /**
     * Create a new OrgDao with an attached configuration
     */
    public OrgDao(Configuration configuration) {
        super(Org.ORG, com.ericdriggs.reportcard.db.tables.pojos.Org.class, configuration);
    }

    @Override
    public Integer getId(com.ericdriggs.reportcard.db.tables.pojos.Org object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.reportcard.db.tables.pojos.Org> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Org.ORG.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.ericdriggs.reportcard.db.tables.pojos.Org> fetchById(Integer... values) {
        return fetch(Org.ORG.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.ericdriggs.reportcard.db.tables.pojos.Org fetchOneById(Integer value) {
        return fetchOne(Org.ORG.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ericdriggs.reportcard.db.tables.pojos.Org> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Org.ORG.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.ericdriggs.reportcard.db.tables.pojos.Org> fetchByName(String... values) {
        return fetch(Org.ORG.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public com.ericdriggs.reportcard.db.tables.pojos.Org fetchOneByName(String value) {
        return fetchOne(Org.ORG.NAME, value);
    }
}
