/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.db.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuite implements Serializable {

    private static final long serialVersionUID = -747646185;

    private Long    testSuiteId;
    private Long    testResultFk;
    private String  testSuitePackage;
    private Integer tests;
    private Integer skipped;
    private Integer error;
    private Integer failure;
    private Long    testSuiteTime;
    private Byte    testSuiteIsSuccess;
    private Byte    hasSkip;

    public TestSuite() {}

    public TestSuite(TestSuite value) {
        this.testSuiteId = value.testSuiteId;
        this.testResultFk = value.testResultFk;
        this.testSuitePackage = value.testSuitePackage;
        this.tests = value.tests;
        this.skipped = value.skipped;
        this.error = value.error;
        this.failure = value.failure;
        this.testSuiteTime = value.testSuiteTime;
        this.testSuiteIsSuccess = value.testSuiteIsSuccess;
        this.hasSkip = value.hasSkip;
    }

    public TestSuite(
        Long    testSuiteId,
        Long    testResultFk,
        String  testSuitePackage,
        Integer tests,
        Integer skipped,
        Integer error,
        Integer failure,
        Long    testSuiteTime,
        Byte    testSuiteIsSuccess,
        Byte    hasSkip
    ) {
        this.testSuiteId = testSuiteId;
        this.testResultFk = testResultFk;
        this.testSuitePackage = testSuitePackage;
        this.tests = tests;
        this.skipped = skipped;
        this.error = error;
        this.failure = failure;
        this.testSuiteTime = testSuiteTime;
        this.testSuiteIsSuccess = testSuiteIsSuccess;
        this.hasSkip = hasSkip;
    }

    public Long getTestSuiteId() {
        return this.testSuiteId;
    }

    public TestSuite setTestSuiteId(Long testSuiteId) {
        this.testSuiteId = testSuiteId;
        return this;
    }

    public Long getTestResultFk() {
        return this.testResultFk;
    }

    public TestSuite setTestResultFk(Long testResultFk) {
        this.testResultFk = testResultFk;
        return this;
    }

    public String getTestSuitePackage() {
        return this.testSuitePackage;
    }

    public TestSuite setTestSuitePackage(String testSuitePackage) {
        this.testSuitePackage = testSuitePackage;
        return this;
    }

    public Integer getTests() {
        return this.tests;
    }

    public TestSuite setTests(Integer tests) {
        this.tests = tests;
        return this;
    }

    public Integer getSkipped() {
        return this.skipped;
    }

    public TestSuite setSkipped(Integer skipped) {
        this.skipped = skipped;
        return this;
    }

    public Integer getError() {
        return this.error;
    }

    public TestSuite setError(Integer error) {
        this.error = error;
        return this;
    }

    public Integer getFailure() {
        return this.failure;
    }

    public TestSuite setFailure(Integer failure) {
        this.failure = failure;
        return this;
    }

    public Long getTestSuiteTime() {
        return this.testSuiteTime;
    }

    public TestSuite setTestSuiteTime(Long testSuiteTime) {
        this.testSuiteTime = testSuiteTime;
        return this;
    }

    public Byte getTestSuiteIsSuccess() {
        return this.testSuiteIsSuccess;
    }

    public TestSuite setTestSuiteIsSuccess(Byte testSuiteIsSuccess) {
        this.testSuiteIsSuccess = testSuiteIsSuccess;
        return this;
    }

    public Byte getHasSkip() {
        return this.hasSkip;
    }

    public TestSuite setHasSkip(Byte hasSkip) {
        this.hasSkip = hasSkip;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TestSuite (");

        sb.append(testSuiteId);
        sb.append(", ").append(testResultFk);
        sb.append(", ").append(testSuitePackage);
        sb.append(", ").append(tests);
        sb.append(", ").append(skipped);
        sb.append(", ").append(error);
        sb.append(", ").append(failure);
        sb.append(", ").append(testSuiteTime);
        sb.append(", ").append(testSuiteIsSuccess);
        sb.append(", ").append(hasSkip);

        sb.append(")");
        return sb.toString();
    }
}
