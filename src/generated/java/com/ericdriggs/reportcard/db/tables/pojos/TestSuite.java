/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.db.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuite implements Serializable {

    private static final long serialVersionUID = 1176758815;

    private Long       testSuiteId;
    private Long       testResultFk;
    private String     package_;
    private Integer    tests;
    private Integer    skipped;
    private Integer    error;
    private Integer    failure;
    private BigDecimal time;
    private Byte       isSuccess;
    private Byte       hasSkip;

    public TestSuite() {}

    public TestSuite(TestSuite value) {
        this.testSuiteId = value.testSuiteId;
        this.testResultFk = value.testResultFk;
        this.package_ = value.package_;
        this.tests = value.tests;
        this.skipped = value.skipped;
        this.error = value.error;
        this.failure = value.failure;
        this.time = value.time;
        this.isSuccess = value.isSuccess;
        this.hasSkip = value.hasSkip;
    }

    public TestSuite(
        Long       testSuiteId,
        Long       testResultFk,
        String     package_,
        Integer    tests,
        Integer    skipped,
        Integer    error,
        Integer    failure,
        BigDecimal time,
        Byte       isSuccess,
        Byte       hasSkip
    ) {
        this.testSuiteId = testSuiteId;
        this.testResultFk = testResultFk;
        this.package_ = package_;
        this.tests = tests;
        this.skipped = skipped;
        this.error = error;
        this.failure = failure;
        this.time = time;
        this.isSuccess = isSuccess;
        this.hasSkip = hasSkip;
    }

    public Long getTestSuiteId() {
        return this.testSuiteId;
    }

    public TestSuite setTestSuiteId(Long testSuiteId) {
        this.testSuiteId = testSuiteId;
        return this;
    }

    public Long getTestResultFk() {
        return this.testResultFk;
    }

    public TestSuite setTestResultFk(Long testResultFk) {
        this.testResultFk = testResultFk;
        return this;
    }

    public String getPackage() {
        return this.package_;
    }

    public TestSuite setPackage(String package_) {
        this.package_ = package_;
        return this;
    }

    public Integer getTests() {
        return this.tests;
    }

    public TestSuite setTests(Integer tests) {
        this.tests = tests;
        return this;
    }

    public Integer getSkipped() {
        return this.skipped;
    }

    public TestSuite setSkipped(Integer skipped) {
        this.skipped = skipped;
        return this;
    }

    public Integer getError() {
        return this.error;
    }

    public TestSuite setError(Integer error) {
        this.error = error;
        return this;
    }

    public Integer getFailure() {
        return this.failure;
    }

    public TestSuite setFailure(Integer failure) {
        this.failure = failure;
        return this;
    }

    public BigDecimal getTime() {
        return this.time;
    }

    public TestSuite setTime(BigDecimal time) {
        this.time = time;
        return this;
    }

    public Byte getIsSuccess() {
        return this.isSuccess;
    }

    public TestSuite setIsSuccess(Byte isSuccess) {
        this.isSuccess = isSuccess;
        return this;
    }

    public Byte getHasSkip() {
        return this.hasSkip;
    }

    public TestSuite setHasSkip(Byte hasSkip) {
        this.hasSkip = hasSkip;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TestSuite (");

        sb.append(testSuiteId);
        sb.append(", ").append(testResultFk);
        sb.append(", ").append(package_);
        sb.append(", ").append(tests);
        sb.append(", ").append(skipped);
        sb.append(", ").append(error);
        sb.append(", ").append(failure);
        sb.append(", ").append(time);
        sb.append(", ").append(isSuccess);
        sb.append(", ").append(hasSkip);

        sb.append(")");
        return sb.toString();
    }
}
