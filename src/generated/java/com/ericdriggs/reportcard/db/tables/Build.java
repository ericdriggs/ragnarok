/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.db.tables;


import com.ericdriggs.reportcard.db.Indexes;
import com.ericdriggs.reportcard.db.Keys;
import com.ericdriggs.reportcard.db.Reportcard;
import com.ericdriggs.reportcard.db.tables.records.BuildRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Build extends TableImpl<BuildRecord> {

    private static final long serialVersionUID = 1947296965;

    /**
     * The reference instance of <code>reportcard.build</code>
     */
    public static final Build BUILD = new Build();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildRecord> getRecordType() {
        return BuildRecord.class;
    }

    /**
     * The column <code>reportcard.build.id</code>.
     */
    public final TableField<BuildRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.build.app_fk</code>.
     */
    public final TableField<BuildRecord, Integer> APP_FK = createField(DSL.name("app_fk"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.build.created</code>.
     */
    public final TableField<BuildRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>reportcard.build.app_build_ordinal</code>.
     */
    public final TableField<BuildRecord, Integer> APP_BUILD_ORDINAL = createField(DSL.name("app_build_ordinal"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>reportcard.build</code> table reference
     */
    public Build() {
        this(DSL.name("build"), null);
    }

    /**
     * Create an aliased <code>reportcard.build</code> table reference
     */
    public Build(String alias) {
        this(DSL.name(alias), BUILD);
    }

    /**
     * Create an aliased <code>reportcard.build</code> table reference
     */
    public Build(Name alias) {
        this(alias, BUILD);
    }

    private Build(Name alias, Table<BuildRecord> aliased) {
        this(alias, aliased, null);
    }

    private Build(Name alias, Table<BuildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Build(Table<O> child, ForeignKey<O, BuildRecord> key) {
        super(child, key, BUILD);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BUILD_APP_IDX);
    }

    @Override
    public Identity<BuildRecord, Long> getIdentity() {
        return Keys.IDENTITY_BUILD;
    }

    @Override
    public UniqueKey<BuildRecord> getPrimaryKey() {
        return Keys.KEY_BUILD_PRIMARY;
    }

    @Override
    public List<UniqueKey<BuildRecord>> getKeys() {
        return Arrays.<UniqueKey<BuildRecord>>asList(Keys.KEY_BUILD_PRIMARY, Keys.KEY_BUILD_APP_BUILD_IDX);
    }

    @Override
    public List<ForeignKey<BuildRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BuildRecord, ?>>asList(Keys.APP_FK);
    }

    public App app() {
        return new App(this, Keys.APP_FK);
    }

    @Override
    public Build as(String alias) {
        return new Build(DSL.name(alias), this);
    }

    @Override
    public Build as(Name alias) {
        return new Build(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(String name) {
        return new Build(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(Name name) {
        return new Build(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
