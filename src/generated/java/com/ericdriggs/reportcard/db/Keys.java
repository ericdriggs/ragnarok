/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.db;


import com.ericdriggs.reportcard.db.tables.App;
import com.ericdriggs.reportcard.db.tables.AppBranch;
import com.ericdriggs.reportcard.db.tables.Branch;
import com.ericdriggs.reportcard.db.tables.Build;
import com.ericdriggs.reportcard.db.tables.BuildStage;
import com.ericdriggs.reportcard.db.tables.Org;
import com.ericdriggs.reportcard.db.tables.Repo;
import com.ericdriggs.reportcard.db.tables.Stage;
import com.ericdriggs.reportcard.db.tables.Storage;
import com.ericdriggs.reportcard.db.tables.StorageType;
import com.ericdriggs.reportcard.db.tables.TestCase;
import com.ericdriggs.reportcard.db.tables.TestResult;
import com.ericdriggs.reportcard.db.tables.TestStatus;
import com.ericdriggs.reportcard.db.tables.TestSuite;
import com.ericdriggs.reportcard.db.tables.records.AppBranchRecord;
import com.ericdriggs.reportcard.db.tables.records.AppRecord;
import com.ericdriggs.reportcard.db.tables.records.BranchRecord;
import com.ericdriggs.reportcard.db.tables.records.BuildRecord;
import com.ericdriggs.reportcard.db.tables.records.BuildStageRecord;
import com.ericdriggs.reportcard.db.tables.records.OrgRecord;
import com.ericdriggs.reportcard.db.tables.records.RepoRecord;
import com.ericdriggs.reportcard.db.tables.records.StageRecord;
import com.ericdriggs.reportcard.db.tables.records.StorageRecord;
import com.ericdriggs.reportcard.db.tables.records.StorageTypeRecord;
import com.ericdriggs.reportcard.db.tables.records.TestCaseRecord;
import com.ericdriggs.reportcard.db.tables.records.TestResultRecord;
import com.ericdriggs.reportcard.db.tables.records.TestStatusRecord;
import com.ericdriggs.reportcard.db.tables.records.TestSuiteRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>reportcard</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AppRecord, Integer> IDENTITY_APP = Identities0.IDENTITY_APP;
    public static final Identity<AppBranchRecord, Integer> IDENTITY_APP_BRANCH = Identities0.IDENTITY_APP_BRANCH;
    public static final Identity<BranchRecord, Integer> IDENTITY_BRANCH = Identities0.IDENTITY_BRANCH;
    public static final Identity<BuildRecord, Long> IDENTITY_BUILD = Identities0.IDENTITY_BUILD;
    public static final Identity<BuildStageRecord, Long> IDENTITY_BUILD_STAGE = Identities0.IDENTITY_BUILD_STAGE;
    public static final Identity<OrgRecord, Integer> IDENTITY_ORG = Identities0.IDENTITY_ORG;
    public static final Identity<RepoRecord, Integer> IDENTITY_REPO = Identities0.IDENTITY_REPO;
    public static final Identity<StageRecord, Integer> IDENTITY_STAGE = Identities0.IDENTITY_STAGE;
    public static final Identity<StorageRecord, Integer> IDENTITY_STORAGE = Identities0.IDENTITY_STORAGE;
    public static final Identity<StorageTypeRecord, Byte> IDENTITY_STORAGE_TYPE = Identities0.IDENTITY_STORAGE_TYPE;
    public static final Identity<TestCaseRecord, Long> IDENTITY_TEST_CASE = Identities0.IDENTITY_TEST_CASE;
    public static final Identity<TestResultRecord, Long> IDENTITY_TEST_RESULT = Identities0.IDENTITY_TEST_RESULT;
    public static final Identity<TestStatusRecord, Byte> IDENTITY_TEST_STATUS = Identities0.IDENTITY_TEST_STATUS;
    public static final Identity<TestSuiteRecord, Long> IDENTITY_TEST_SUITE = Identities0.IDENTITY_TEST_SUITE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AppRecord> KEY_APP_PRIMARY = UniqueKeys0.KEY_APP_PRIMARY;
    public static final UniqueKey<AppRecord> KEY_APP_NAME_UNIQUE = UniqueKeys0.KEY_APP_NAME_UNIQUE;
    public static final UniqueKey<AppBranchRecord> KEY_APP_BRANCH_PRIMARY = UniqueKeys0.KEY_APP_BRANCH_PRIMARY;
    public static final UniqueKey<BranchRecord> KEY_BRANCH_PRIMARY = UniqueKeys0.KEY_BRANCH_PRIMARY;
    public static final UniqueKey<BranchRecord> KEY_BRANCH_REPO_BRANCH_IDX = UniqueKeys0.KEY_BRANCH_REPO_BRANCH_IDX;
    public static final UniqueKey<BranchRecord> KEY_BRANCH_NAME_UNIQUE = UniqueKeys0.KEY_BRANCH_NAME_UNIQUE;
    public static final UniqueKey<BuildRecord> KEY_BUILD_PRIMARY = UniqueKeys0.KEY_BUILD_PRIMARY;
    public static final UniqueKey<BuildStageRecord> KEY_BUILD_STAGE_PRIMARY = UniqueKeys0.KEY_BUILD_STAGE_PRIMARY;
    public static final UniqueKey<OrgRecord> KEY_ORG_PRIMARY = UniqueKeys0.KEY_ORG_PRIMARY;
    public static final UniqueKey<OrgRecord> KEY_ORG_IDX_ORG_NAME = UniqueKeys0.KEY_ORG_IDX_ORG_NAME;
    public static final UniqueKey<RepoRecord> KEY_REPO_PRIMARY = UniqueKeys0.KEY_REPO_PRIMARY;
    public static final UniqueKey<RepoRecord> KEY_REPO_ORG_REPO_IDX = UniqueKeys0.KEY_REPO_ORG_REPO_IDX;
    public static final UniqueKey<RepoRecord> KEY_REPO_NAME_UNIQUE = UniqueKeys0.KEY_REPO_NAME_UNIQUE;
    public static final UniqueKey<StageRecord> KEY_STAGE_PRIMARY = UniqueKeys0.KEY_STAGE_PRIMARY;
    public static final UniqueKey<StageRecord> KEY_STAGE_NAME_UNIQUE = UniqueKeys0.KEY_STAGE_NAME_UNIQUE;
    public static final UniqueKey<StorageRecord> KEY_STORAGE_PRIMARY = UniqueKeys0.KEY_STORAGE_PRIMARY;
    public static final UniqueKey<StorageTypeRecord> KEY_STORAGE_TYPE_PRIMARY = UniqueKeys0.KEY_STORAGE_TYPE_PRIMARY;
    public static final UniqueKey<TestCaseRecord> KEY_TEST_CASE_PRIMARY = UniqueKeys0.KEY_TEST_CASE_PRIMARY;
    public static final UniqueKey<TestResultRecord> KEY_TEST_RESULT_PRIMARY = UniqueKeys0.KEY_TEST_RESULT_PRIMARY;
    public static final UniqueKey<TestStatusRecord> KEY_TEST_STATUS_PRIMARY = UniqueKeys0.KEY_TEST_STATUS_PRIMARY;
    public static final UniqueKey<TestSuiteRecord> KEY_TEST_SUITE_PRIMARY = UniqueKeys0.KEY_TEST_SUITE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AppRecord, RepoRecord> APP_REPO_FK = ForeignKeys0.APP_REPO_FK;
    public static final ForeignKey<AppBranchRecord, AppRecord> APP_BRANCH_APP_FK = ForeignKeys0.APP_BRANCH_APP_FK;
    public static final ForeignKey<AppBranchRecord, BranchRecord> APP_BRANCH_BRANCH_FK = ForeignKeys0.APP_BRANCH_BRANCH_FK;
    public static final ForeignKey<BranchRecord, RepoRecord> BRANCH_REPO_FK = ForeignKeys0.BRANCH_REPO_FK;
    public static final ForeignKey<BuildRecord, AppBranchRecord> BUILD_APP_BRANCH_FK = ForeignKeys0.BUILD_APP_BRANCH_FK;
    public static final ForeignKey<BuildStageRecord, BuildRecord> FK_BUILD = ForeignKeys0.FK_BUILD;
    public static final ForeignKey<BuildStageRecord, StageRecord> FK_STAGE = ForeignKeys0.FK_STAGE;
    public static final ForeignKey<RepoRecord, OrgRecord> REPO_ORG_FK = ForeignKeys0.REPO_ORG_FK;
    public static final ForeignKey<StageRecord, AppBranchRecord> STAGE_APP_BRANCH_FK = ForeignKeys0.STAGE_APP_BRANCH_FK;
    public static final ForeignKey<StorageRecord, BuildStageRecord> FK_REPORT_BUILD_STAGE = ForeignKeys0.FK_REPORT_BUILD_STAGE;
    public static final ForeignKey<TestCaseRecord, TestSuiteRecord> FK_TEST_CASE_TEST_SUITE = ForeignKeys0.FK_TEST_CASE_TEST_SUITE;
    public static final ForeignKey<TestCaseRecord, TestStatusRecord> FK_TEST_CASE_TEST_STATUS = ForeignKeys0.FK_TEST_CASE_TEST_STATUS;
    public static final ForeignKey<TestResultRecord, BuildStageRecord> FK_TEST_RESULT_BUILD_STAGE = ForeignKeys0.FK_TEST_RESULT_BUILD_STAGE;
    public static final ForeignKey<TestSuiteRecord, TestResultRecord> TEST_RESULT_FK = ForeignKeys0.TEST_RESULT_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AppRecord, Integer> IDENTITY_APP = Internal.createIdentity(App.APP, App.APP.APP_ID);
        public static Identity<AppBranchRecord, Integer> IDENTITY_APP_BRANCH = Internal.createIdentity(AppBranch.APP_BRANCH, AppBranch.APP_BRANCH.APP_BRANCH_ID);
        public static Identity<BranchRecord, Integer> IDENTITY_BRANCH = Internal.createIdentity(Branch.BRANCH, Branch.BRANCH.BRANCH_ID);
        public static Identity<BuildRecord, Long> IDENTITY_BUILD = Internal.createIdentity(Build.BUILD, Build.BUILD.BUILD_ID);
        public static Identity<BuildStageRecord, Long> IDENTITY_BUILD_STAGE = Internal.createIdentity(BuildStage.BUILD_STAGE, BuildStage.BUILD_STAGE.ID);
        public static Identity<OrgRecord, Integer> IDENTITY_ORG = Internal.createIdentity(Org.ORG, Org.ORG.ORG_ID);
        public static Identity<RepoRecord, Integer> IDENTITY_REPO = Internal.createIdentity(Repo.REPO, Repo.REPO.REPO_ID);
        public static Identity<StageRecord, Integer> IDENTITY_STAGE = Internal.createIdentity(Stage.STAGE, Stage.STAGE.STAGE_ID);
        public static Identity<StorageRecord, Integer> IDENTITY_STORAGE = Internal.createIdentity(Storage.STORAGE, Storage.STORAGE.STORAGE_ID);
        public static Identity<StorageTypeRecord, Byte> IDENTITY_STORAGE_TYPE = Internal.createIdentity(StorageType.STORAGE_TYPE, StorageType.STORAGE_TYPE.ID);
        public static Identity<TestCaseRecord, Long> IDENTITY_TEST_CASE = Internal.createIdentity(TestCase.TEST_CASE, TestCase.TEST_CASE.TEST_CASE_ID);
        public static Identity<TestResultRecord, Long> IDENTITY_TEST_RESULT = Internal.createIdentity(TestResult.TEST_RESULT, TestResult.TEST_RESULT.TEST_RESULT_ID);
        public static Identity<TestStatusRecord, Byte> IDENTITY_TEST_STATUS = Internal.createIdentity(TestStatus.TEST_STATUS, TestStatus.TEST_STATUS.TEST_STATUS_ID);
        public static Identity<TestSuiteRecord, Long> IDENTITY_TEST_SUITE = Internal.createIdentity(TestSuite.TEST_SUITE, TestSuite.TEST_SUITE.TEST_SUITE_ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AppRecord> KEY_APP_PRIMARY = Internal.createUniqueKey(App.APP, "KEY_app_PRIMARY", new TableField[] { App.APP.APP_ID }, true);
        public static final UniqueKey<AppRecord> KEY_APP_NAME_UNIQUE = Internal.createUniqueKey(App.APP, "KEY_app_name_UNIQUE", new TableField[] { App.APP.APP_NAME }, true);
        public static final UniqueKey<AppBranchRecord> KEY_APP_BRANCH_PRIMARY = Internal.createUniqueKey(AppBranch.APP_BRANCH, "KEY_app_branch_PRIMARY", new TableField[] { AppBranch.APP_BRANCH.APP_BRANCH_ID }, true);
        public static final UniqueKey<BranchRecord> KEY_BRANCH_PRIMARY = Internal.createUniqueKey(Branch.BRANCH, "KEY_branch_PRIMARY", new TableField[] { Branch.BRANCH.BRANCH_ID }, true);
        public static final UniqueKey<BranchRecord> KEY_BRANCH_REPO_BRANCH_IDX = Internal.createUniqueKey(Branch.BRANCH, "KEY_branch_repo_branch_idx", new TableField[] { Branch.BRANCH.REPO_FK, Branch.BRANCH.BRANCH_ID }, true);
        public static final UniqueKey<BranchRecord> KEY_BRANCH_NAME_UNIQUE = Internal.createUniqueKey(Branch.BRANCH, "KEY_branch_name_UNIQUE", new TableField[] { Branch.BRANCH.BRANCH_NAME }, true);
        public static final UniqueKey<BuildRecord> KEY_BUILD_PRIMARY = Internal.createUniqueKey(Build.BUILD, "KEY_build_PRIMARY", new TableField[] { Build.BUILD.BUILD_ID }, true);
        public static final UniqueKey<BuildStageRecord> KEY_BUILD_STAGE_PRIMARY = Internal.createUniqueKey(BuildStage.BUILD_STAGE, "KEY_build_stage_PRIMARY", new TableField[] { BuildStage.BUILD_STAGE.ID }, true);
        public static final UniqueKey<OrgRecord> KEY_ORG_PRIMARY = Internal.createUniqueKey(Org.ORG, "KEY_org_PRIMARY", new TableField[] { Org.ORG.ORG_ID }, true);
        public static final UniqueKey<OrgRecord> KEY_ORG_IDX_ORG_NAME = Internal.createUniqueKey(Org.ORG, "KEY_org_idx_org_name", new TableField[] { Org.ORG.ORG_NAME }, true);
        public static final UniqueKey<RepoRecord> KEY_REPO_PRIMARY = Internal.createUniqueKey(Repo.REPO, "KEY_repo_PRIMARY", new TableField[] { Repo.REPO.REPO_ID }, true);
        public static final UniqueKey<RepoRecord> KEY_REPO_ORG_REPO_IDX = Internal.createUniqueKey(Repo.REPO, "KEY_repo_org_repo_idx", new TableField[] { Repo.REPO.REPO_ID, Repo.REPO.ORG_FK }, true);
        public static final UniqueKey<RepoRecord> KEY_REPO_NAME_UNIQUE = Internal.createUniqueKey(Repo.REPO, "KEY_repo_name_UNIQUE", new TableField[] { Repo.REPO.REPO_NAME }, true);
        public static final UniqueKey<StageRecord> KEY_STAGE_PRIMARY = Internal.createUniqueKey(Stage.STAGE, "KEY_stage_PRIMARY", new TableField[] { Stage.STAGE.STAGE_ID }, true);
        public static final UniqueKey<StageRecord> KEY_STAGE_NAME_UNIQUE = Internal.createUniqueKey(Stage.STAGE, "KEY_stage_name_UNIQUE", new TableField[] { Stage.STAGE.STAGE_NAME }, true);
        public static final UniqueKey<StorageRecord> KEY_STORAGE_PRIMARY = Internal.createUniqueKey(Storage.STORAGE, "KEY_storage_PRIMARY", new TableField[] { Storage.STORAGE.STORAGE_ID }, true);
        public static final UniqueKey<StorageTypeRecord> KEY_STORAGE_TYPE_PRIMARY = Internal.createUniqueKey(StorageType.STORAGE_TYPE, "KEY_storage_type_PRIMARY", new TableField[] { StorageType.STORAGE_TYPE.ID }, true);
        public static final UniqueKey<TestCaseRecord> KEY_TEST_CASE_PRIMARY = Internal.createUniqueKey(TestCase.TEST_CASE, "KEY_test_case_PRIMARY", new TableField[] { TestCase.TEST_CASE.TEST_CASE_ID }, true);
        public static final UniqueKey<TestResultRecord> KEY_TEST_RESULT_PRIMARY = Internal.createUniqueKey(TestResult.TEST_RESULT, "KEY_test_result_PRIMARY", new TableField[] { TestResult.TEST_RESULT.TEST_RESULT_ID }, true);
        public static final UniqueKey<TestStatusRecord> KEY_TEST_STATUS_PRIMARY = Internal.createUniqueKey(TestStatus.TEST_STATUS, "KEY_test_status_PRIMARY", new TableField[] { TestStatus.TEST_STATUS.TEST_STATUS_ID }, true);
        public static final UniqueKey<TestSuiteRecord> KEY_TEST_SUITE_PRIMARY = Internal.createUniqueKey(TestSuite.TEST_SUITE, "KEY_test_suite_PRIMARY", new TableField[] { TestSuite.TEST_SUITE.TEST_SUITE_ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AppRecord, RepoRecord> APP_REPO_FK = Internal.createForeignKey(Keys.KEY_REPO_PRIMARY, App.APP, "app_repo_fk", new TableField[] { App.APP.REPO_FK }, true);
        public static final ForeignKey<AppBranchRecord, AppRecord> APP_BRANCH_APP_FK = Internal.createForeignKey(Keys.KEY_APP_PRIMARY, AppBranch.APP_BRANCH, "app_branch_app_fk", new TableField[] { AppBranch.APP_BRANCH.APP_FK }, true);
        public static final ForeignKey<AppBranchRecord, BranchRecord> APP_BRANCH_BRANCH_FK = Internal.createForeignKey(Keys.KEY_BRANCH_PRIMARY, AppBranch.APP_BRANCH, "app_branch_branch_fk", new TableField[] { AppBranch.APP_BRANCH.BRANCH_FK }, true);
        public static final ForeignKey<BranchRecord, RepoRecord> BRANCH_REPO_FK = Internal.createForeignKey(Keys.KEY_REPO_PRIMARY, Branch.BRANCH, "branch_repo_fk", new TableField[] { Branch.BRANCH.REPO_FK }, true);
        public static final ForeignKey<BuildRecord, AppBranchRecord> BUILD_APP_BRANCH_FK = Internal.createForeignKey(Keys.KEY_APP_BRANCH_PRIMARY, Build.BUILD, "build_app_branch_fk", new TableField[] { Build.BUILD.APP_BRANCH_FK }, true);
        public static final ForeignKey<BuildStageRecord, BuildRecord> FK_BUILD = Internal.createForeignKey(Keys.KEY_BUILD_PRIMARY, BuildStage.BUILD_STAGE, "fk_build", new TableField[] { BuildStage.BUILD_STAGE.BUILD_FK }, true);
        public static final ForeignKey<BuildStageRecord, StageRecord> FK_STAGE = Internal.createForeignKey(Keys.KEY_STAGE_PRIMARY, BuildStage.BUILD_STAGE, "fk_stage", new TableField[] { BuildStage.BUILD_STAGE.STAGE_FK }, true);
        public static final ForeignKey<RepoRecord, OrgRecord> REPO_ORG_FK = Internal.createForeignKey(Keys.KEY_ORG_PRIMARY, Repo.REPO, "repo_org_fk", new TableField[] { Repo.REPO.ORG_FK }, true);
        public static final ForeignKey<StageRecord, AppBranchRecord> STAGE_APP_BRANCH_FK = Internal.createForeignKey(Keys.KEY_APP_BRANCH_PRIMARY, Stage.STAGE, "stage_app_branch_fk", new TableField[] { Stage.STAGE.APP_BRANCH_FK }, true);
        public static final ForeignKey<StorageRecord, BuildStageRecord> FK_REPORT_BUILD_STAGE = Internal.createForeignKey(Keys.KEY_BUILD_STAGE_PRIMARY, Storage.STORAGE, "fk_report_build_stage", new TableField[] { Storage.STORAGE.BUILD_STAGE_FK }, true);
        public static final ForeignKey<TestCaseRecord, TestSuiteRecord> FK_TEST_CASE_TEST_SUITE = Internal.createForeignKey(Keys.KEY_TEST_SUITE_PRIMARY, TestCase.TEST_CASE, "fk_test_case_test_suite", new TableField[] { TestCase.TEST_CASE.TEST_SUITE_FK }, true);
        public static final ForeignKey<TestCaseRecord, TestStatusRecord> FK_TEST_CASE_TEST_STATUS = Internal.createForeignKey(Keys.KEY_TEST_STATUS_PRIMARY, TestCase.TEST_CASE, "fk_test_case_test_status", new TableField[] { TestCase.TEST_CASE.TEST_STATUS_FK }, true);
        public static final ForeignKey<TestResultRecord, BuildStageRecord> FK_TEST_RESULT_BUILD_STAGE = Internal.createForeignKey(Keys.KEY_BUILD_STAGE_PRIMARY, TestResult.TEST_RESULT, "fk_test_result_build_stage", new TableField[] { TestResult.TEST_RESULT.BUILD_STAGE_FK }, true);
        public static final ForeignKey<TestSuiteRecord, TestResultRecord> TEST_RESULT_FK = Internal.createForeignKey(Keys.KEY_TEST_RESULT_PRIMARY, TestSuite.TEST_SUITE, "test_result_fk", new TableField[] { TestSuite.TEST_SUITE.TEST_RESULT_FK }, true);
    }
}
