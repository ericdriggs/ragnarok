/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ericdriggs.reportcard.client.api;

import com.ericdriggs.reportcard.client.api.App;
import com.ericdriggs.reportcard.client.api.AppBranch;
import com.ericdriggs.reportcard.client.api.Branch;
import com.ericdriggs.reportcard.client.api.Build;
import com.ericdriggs.reportcard.client.api.Org;
import com.ericdriggs.reportcard.client.api.Repo;
import com.ericdriggs.reportcard.client.api.Stage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JsonControllerApi
 */
@Ignore
public class JsonControllerApiTest {

    private final JsonControllerApi api = new JsonControllerApi();

    
    /**
     * getAppBranch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppBranchUsingGETTest() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        AppBranch response = api.getAppBranchUsingGET(app, branch, org, repo);

        // TODO: test validations
    }
    
    /**
     * getAppBranch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppBranchUsingGET1Test() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        AppBranch response = api.getAppBranchUsingGET1(app, branch, org, repo);

        // TODO: test validations
    }
    
    /**
     * getApp
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppUsingGETTest() {
        String app = null;
        String org = null;
        String repo = null;
        App response = api.getAppUsingGET(app, org, repo);

        // TODO: test validations
    }
    
    /**
     * getApps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppsUsingGETTest() {
        String org = null;
        String repo = null;
        List<App> response = api.getAppsUsingGET(org, repo);

        // TODO: test validations
    }
    
    /**
     * getBranch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBranchUsingGETTest() {
        String branch = null;
        String org = null;
        String repo = null;
        Branch response = api.getBranchUsingGET(branch, org, repo);

        // TODO: test validations
    }
    
    /**
     * getBranches
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBranchesUsingGETTest() {
        String org = null;
        String repo = null;
        List<Branch> response = api.getBranchesUsingGET(org, repo);

        // TODO: test validations
    }
    
    /**
     * getBuild
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildUsingGETTest() {
        String app = null;
        String branch = null;
        String buildUniqueString = null;
        String org = null;
        String repo = null;
        Build response = api.getBuildUsingGET(app, branch, buildUniqueString, org, repo);

        // TODO: test validations
    }
    
    /**
     * getBuild
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildUsingGET1Test() {
        String app = null;
        String branch = null;
        String buildUniqueString = null;
        String org = null;
        String repo = null;
        Build response = api.getBuildUsingGET1(app, branch, buildUniqueString, org, repo);

        // TODO: test validations
    }
    
    /**
     * getBuilds
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildsUsingGETTest() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        List<Build> response = api.getBuildsUsingGET(app, branch, org, repo);

        // TODO: test validations
    }
    
    /**
     * getOrg
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgUsingGETTest() {
        String org = null;
        Org response = api.getOrgUsingGET(org);

        // TODO: test validations
    }
    
    /**
     * getOrgs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgsUsingGETTest() {
        String org = null;
        List<Org> response = api.getOrgsUsingGET(org);

        // TODO: test validations
    }
    
    /**
     * getRepo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepoUsingGETTest() {
        String org = null;
        String repo = null;
        Repo response = api.getRepoUsingGET(org, repo);

        // TODO: test validations
    }
    
    /**
     * getRepos
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReposUsingGETTest() {
        String org = null;
        List<Repo> response = api.getReposUsingGET(org);

        // TODO: test validations
    }
    
    /**
     * getStage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGETTest() {
        String app = null;
        String branch = null;
        String buildUniqueString = null;
        String org = null;
        String repo = null;
        String stage = null;
        Stage response = api.getStageUsingGET(app, branch, buildUniqueString, org, repo, stage);

        // TODO: test validations
    }
    
    /**
     * getStage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGET1Test() {
        String app = null;
        String branch = null;
        String buildUniqueString = null;
        String org = null;
        String repo = null;
        String stage = null;
        Stage response = api.getStageUsingGET1(app, branch, buildUniqueString, org, repo, stage);

        // TODO: test validations
    }
    
    /**
     * getStage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGET2Test() {
        String app = null;
        String branch = null;
        String buildUniqueString = null;
        String org = null;
        String repo = null;
        String stage = null;
        Stage response = api.getStageUsingGET2(app, branch, buildUniqueString, org, repo, stage);

        // TODO: test validations
    }
    
    /**
     * getStage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGET3Test() {
        String app = null;
        String branch = null;
        String buildUniqueString = null;
        String org = null;
        String repo = null;
        String stage = null;
        Stage response = api.getStageUsingGET3(app, branch, buildUniqueString, org, repo, stage);

        // TODO: test validations
    }
    
    /**
     * getStage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGET4Test() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        String stage = null;
        Stage response = api.getStageUsingGET4(app, branch, org, repo, stage);

        // TODO: test validations
    }
    
    /**
     * getStage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStageUsingGET5Test() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        String stage = null;
        Stage response = api.getStageUsingGET5(app, branch, org, repo, stage);

        // TODO: test validations
    }
    
    /**
     * getStages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStagesUsingGETTest() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        List<Stage> response = api.getStagesUsingGET(app, branch, org, repo);

        // TODO: test validations
    }
    
    /**
     * getStages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStagesUsingGET1Test() {
        String app = null;
        String branch = null;
        String org = null;
        String repo = null;
        List<Stage> response = api.getStagesUsingGET1(app, branch, org, repo);

        // TODO: test validations
    }
    
}
