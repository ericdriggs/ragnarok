buildscript {
    ext {
        jaxbVersion = '2.3.1'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'mysql:mysql-connector-java:8.0.20'
        classpath files('libs/reportcard-jooq-generator.jar')
    }
}
plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'nu.studer.jooq' version '4.2'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    //Lombok
    compile 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //Swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    //XML
    implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"

    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-logging'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    //Database
    implementation 'mysql:mysql-connector-java'
    implementation 'org.jooq:jooq'
    implementation 'org.jooq:jooq-codegen'
    implementation 'org.springframework.boot:spring-boot-starter-jooq:2.3.1.RELEASE'

    testImplementation 'com.wix:wix-embedded-mysql:4.6.1'


    implementation 'mysql:mysql-connector-java:8.0.20'
    jooqRuntime 'mysql:mysql-connector-java:8.0.20'

    //Mapping
    implementation 'org.modelmapper:modelmapper:2.3.0'
    implementation 'org.modelmapper.extensions:modelmapper-jooq:2.3.0'

    //Test
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

task generateJooqSchemaSource {
    group = "jooq"
    doLast {
        GenerationTool.generate(new Configuration()
                .withJdbc(new Jdbc()
                        .withDriver('com.mysql.cj.jdbc.Driver')
                        .withUrl('jdbc:mysql://127.0.0.1:3306/reportcard?serverTimezone=UTC')
                        .withUser('root')
                        .withPassword('')
                        .withProperties(Arrays.asList(new Property().withKey("ssl").withValue("true")))
                )
                .withGenerator(new Generator()
                        .withName('org.jooq.codegen.JavaLombokGenerator')
                        .withStrategy(new Strategy()
                                .withName('org.jooq.codegen.DefaultGeneratorStrategy')
                        )
                        .withDatabase(new Database()
                                .withName('org.jooq.meta.mysql.MySQLDatabase')
                                .withInputSchema('reportcard')
                                .withUnsignedTypes(false)
                                .withForcedTypes(
                                        Arrays.asList(
                                                new ForcedType().withName('varchar')
                                                        .withIncludeExpression('.*').withIncludeTypes('JSONB?'),
                                                new ForcedType().withName('varchar')
                                                        .withIncludeExpression('.*').withIncludeTypes('INET'),
                                                new ForcedType().withName('BOOLEAN')
                                                        .withIncludeExpression('is_.*').withIncludeTypes('TINYINT'),
                                                new ForcedType().withName('BOOLEAN')
                                                        .withIncludeExpression('has_.*').withIncludeTypes('TINYINT')
                                        )
                                )
                        )
                        .withGenerate(new Generate()
                                .withGeneratedAnnotation(true)
                                .withDaos(true)
                                .withRelations(true)
                                .withDeprecated(false)
                                .withRecords(true)
                                .withPojos(true)
                                .withImmutablePojos(false)
                                .withFluentSetters(true)
                        )
                        .withTarget(new Target()
                                .withPackageName('com.ericdriggs.reportcard.gen.db')
                                .withDirectory('src/generated/java')
                        )
                )
        )
    }
}

jooq {
    version = '3.13.4'
    edition = 'OSS'
    generateSchemaSourceOnCompilation = false
    sample(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = 'jdbc:mysql://127.0.0.1:3306/reportcard?serverTimezone=UTC'
            user = 'root'
            password = ''
            properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }
        }
        generator {

            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'reportcard'
                unsignedTypes = false
                forcedTypes {
                    forcedType {
                        name = 'varchar'
                        includeExpression = '.*'
                        includeTypes = 'JSONB?'
                    }
                    forcedType {
                        name = 'varchar'
                        includeExpression = '.*'
                        includeTypes = 'INET'
                    }
                    forcedType {
                        name = 'BOOLEAN'
                        includeExpression = 'is_.*'
                        includeTypes = "TINYINT"
                    }
                    forcedType {
                        name = 'BOOLEAN'
                        includeExpression = 'has_.*'
                        includeTypes = "TINYINT"
                    }
                }
            }
            generate {
                generatedAnnotation = true
                daos = true
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'com.ericdriggs.reportcard.gen.db'
                directory = 'src/generated/java'
            }
        }
    }
}
sourceSets.main.java.srcDirs += ['src/generated/java']

