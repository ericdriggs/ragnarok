/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.gen.db.tables;


import com.ericdriggs.reportcard.gen.db.Indexes;
import com.ericdriggs.reportcard.gen.db.Keys;
import com.ericdriggs.reportcard.gen.db.Reportcard;
import com.ericdriggs.reportcard.gen.db.tables.records.AppRecord;

import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class App extends TableImpl<AppRecord> {

    private static final long serialVersionUID = 1672720649;

    /**
     * The reference instance of <code>reportcard.app</code>
     */
    public static final App APP = new App();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppRecord> getRecordType() {
        return AppRecord.class;
    }

    /**
     * The column <code>reportcard.app.app_id</code>.
     */
    public final TableField<AppRecord, Integer> APP_ID = createField(DSL.name("app_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.app.app_name</code>.
     */
    public final TableField<AppRecord, String> APP_NAME = createField(DSL.name("app_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.app.repo_fk</code>.
     */
    public final TableField<AppRecord, Integer> REPO_FK = createField(DSL.name("repo_fk"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>reportcard.app</code> table reference
     */
    public App() {
        this(DSL.name("app"), null);
    }

    /**
     * Create an aliased <code>reportcard.app</code> table reference
     */
    public App(String alias) {
        this(DSL.name(alias), APP);
    }

    /**
     * Create an aliased <code>reportcard.app</code> table reference
     */
    public App(Name alias) {
        this(alias, APP);
    }

    private App(Name alias, Table<AppRecord> aliased) {
        this(alias, aliased, null);
    }

    private App(Name alias, Table<AppRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> App(Table<O> child, ForeignKey<O, AppRecord> key) {
        super(child, key, APP);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_APP_REPO_IDX);
    }

    @Override
    public Identity<AppRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APP;
    }

    @Override
    public UniqueKey<AppRecord> getPrimaryKey() {
        return Keys.KEY_APP_PRIMARY;
    }

    @Override
    public List<UniqueKey<AppRecord>> getKeys() {
        return Arrays.<UniqueKey<AppRecord>>asList(Keys.KEY_APP_PRIMARY, Keys.KEY_APP_APP_NAME_IDX);
    }

    @Override
    public List<ForeignKey<AppRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AppRecord, ?>>asList(Keys.APP_REPO_FK);
    }

    public Repo repo() {
        return new Repo(this, Keys.APP_REPO_FK);
    }

    @Override
    public App as(String alias) {
        return new App(DSL.name(alias), this);
    }

    @Override
    public App as(Name alias) {
        return new App(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public App rename(String name) {
        return new App(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public App rename(Name name) {
        return new App(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
