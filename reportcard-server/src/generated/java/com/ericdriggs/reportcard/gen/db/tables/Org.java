/*
 * This file is generated by jOOQ.
 */
package com.ericdriggs.reportcard.gen.db.tables;


import com.ericdriggs.reportcard.gen.db.Keys;
import com.ericdriggs.reportcard.gen.db.Reportcard;
import com.ericdriggs.reportcard.gen.db.tables.records.OrgRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Org extends TableImpl<OrgRecord> {

    private static final long serialVersionUID = 167730462;

    /**
     * The reference instance of <code>reportcard.org</code>
     */
    public static final Org ORG = new Org();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrgRecord> getRecordType() {
        return OrgRecord.class;
    }

    /**
     * The column <code>reportcard.org.org_id</code>.
     */
    public final TableField<OrgRecord, Integer> ORG_ID = createField(DSL.name("org_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.org.org_name</code>.
     */
    public final TableField<OrgRecord, String> ORG_NAME = createField(DSL.name("org_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>reportcard.org</code> table reference
     */
    public Org() {
        this(DSL.name("org"), null);
    }

    /**
     * Create an aliased <code>reportcard.org</code> table reference
     */
    public Org(String alias) {
        this(DSL.name(alias), ORG);
    }

    /**
     * Create an aliased <code>reportcard.org</code> table reference
     */
    public Org(Name alias) {
        this(alias, ORG);
    }

    private Org(Name alias, Table<OrgRecord> aliased) {
        this(alias, aliased, null);
    }

    private Org(Name alias, Table<OrgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Org(Table<O> child, ForeignKey<O, OrgRecord> key) {
        super(child, key, ORG);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public Identity<OrgRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORG;
    }

    @Override
    public UniqueKey<OrgRecord> getPrimaryKey() {
        return Keys.KEY_ORG_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrgRecord>> getKeys() {
        return Arrays.<UniqueKey<OrgRecord>>asList(Keys.KEY_ORG_PRIMARY, Keys.KEY_ORG_ORG_NAME_IDX);
    }

    @Override
    public Org as(String alias) {
        return new Org(DSL.name(alias), this);
    }

    @Override
    public Org as(Name alias) {
        return new Org(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Org rename(String name) {
        return new Org(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Org rename(Name name) {
        return new Org(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
